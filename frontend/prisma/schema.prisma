generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String                  @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole                @default(USER)
  nummer                Int?
  isActive              Boolean                 @default(true)
  username              String?                 @unique
  accounts              Account[]
  ArrangementPaamelding ArrangementPaamelding[]
  Booking               Booking[]
  Hovedstyret           Hovedstyret?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Hovedstyret {
  rolle     String   @unique
  text      String
  image     String
  updatedAt DateTime
  userID    String   @unique
  isActive  Boolean  @default(true)
  User      User     @relation(fields: [userID], references: [id])

  @@id([rolle, userID], name: "id")
}

model komite {
  id          String        @id @default(cuid())
  navn        String        @unique
  leder       String?
  text1       String?
  text2       String?
  text3       String?
  bilde       String
  mail        String?
  mappe       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Arrangement Arrangement[]
  Booking     Booking[]
}

model Arrangement {
  id                    String                  @id
  navn                  String
  sted                  String
  dato                  DateTime
  bilde                 String?
  kapasitet             Int?
  beskrivelse           String
  trinn                 String[]                @default([])
  arrangorID            String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  komite                komite                  @relation(fields: [arrangorID], references: [id])
  ArrangementPaamelding ArrangementPaamelding[]
}

model ArrangementPaamelding {
  id            String      @id
  userID        String
  arrangementID String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  Arrangement   Arrangement @relation(fields: [arrangementID], references: [id])
  User          User        @relation(fields: [userID], references: [id])

  @@unique([userID, arrangementID])
}

model Booking {
  id        String     @id
  userID    String
  komiteID  String?
  item      BookedItem
  bookedAt  DateTime
  duration  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime
  komite    komite?    @relation(fields: [komiteID], references: [id])
  User      User       @relation(fields: [userID], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

enum BookedItem {
  KONTOR
  ONE_SOUNDBOX
  TWO_SOUNDBOXES
}
