generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String                  @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  role                   UserRole                @default(USER)
  nummer                 Int?
  isActive               Boolean                 @default(true)
  username               String?                 @unique
  accounts               Account[]
  paameldinger           ArrangementPaamelding[]
  bookings               Booking[]
  Hovedstyret            Hovedstyret?
  lavterskelArrangements LavterskelArrangement[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Hovedstyret {
  rolle     String   @unique
  text      String
  image     String
  updatedAt DateTime
  userID    String   @unique
  isActive  Boolean  @default(true)
  User      User     @relation(fields: [userID], references: [id])

  @@id([rolle, userID], name: "id")
}

model komite {
  id            String        @id @default(cuid())
  navn          String        @unique
  leder         String?
  text1         String?
  text2         String?
  text3         String?
  bilde         String
  mail          String?
  mappe         String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  arrangementer Arrangement[]
  bookings      Booking[]
}

model Arrangement {
  id           String                  @id @default(cuid())
  navn         String
  sted         String
  dato         DateTime
  bilde        String?
  kapasitet    Int?
  beskrivelse  String
  arrangorID   String
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  trinn        Int[]                   @default([])
  arrangor     komite                  @relation(fields: [arrangorID], references: [id])
  paameldinger ArrangementPaamelding[]
}

model Booking {
  id        String        @id @default(cuid())
  userID    String
  komiteID  String?
  item      BookedItem
  bookedAt  DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    BookingStatus @default(PENDING)
  komite    komite?       @relation(fields: [komiteID], references: [id])
  user      User          @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model ArrangementPaamelding {
  id            String      @id @default(cuid())
  userID        String
  arrangementID String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  arrangement   Arrangement @relation(fields: [arrangementID], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@unique([userID, arrangementID])
}

model LavterskelArrangement {
  id          String   @id @default(cuid())
  navn        String
  sted        String?
  dato        DateTime
  type        String
  beskrivelse String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Hovedsamarbeidspartner {
  id          String  @id @default(cuid())
  navn        String  @unique
  beskrivelse String
  active      Boolean
  logo        String
  hjemmeside  String
  annonseside String
}

model Samarbeidspartner {
  id       String  @id @default(cuid())
  navn     String  @unique
  active   Boolean
  logo     String
  homepage String
}

model aeresEmiler {
  id   String          @id @default(cuid())
  type aeresEmilerType
  navn String
  aar  Int
}

enum aeresEmilerType {
  AERESEMILER
  FORTJENESTEMEDALJE
}

enum BookedItem {
  KONTOR
  ONE_SOUNDBOX
  TWO_SOUNDBOXES
}

enum BookingStatus {
  PENDING
  CONFIRMED
  REJECTED
}

enum UserRole {
  ADMIN
  USER
  SUPER_USER
}