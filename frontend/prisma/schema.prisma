generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  username      String?      @unique
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole     @default(USER)
  nummer        Int?
  accounts      Account[]
  Hovedstyret   Hovedstyret?
  bookings      Booking[]
  paameldinger  ArrangementPaamelding[]
  isActive      Boolean      @default(true)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Hovedstyret {
  rolle     String   @unique
  text      String
  isActive  Boolean  @default(true)
  image     String
  updatedAt DateTime
  userID    String   @unique
  User      User     @relation(fields: [userID], references: [id])

  @@id([rolle, userID])
}

model komite {
  id            String        @id @default(cuid())
  navn          String        @unique
  leder         String?
  text1         String?
  text2         String?
  text3         String?
  bilde         String
  mail          String?
  mappe         String
  arrangementer Arrangement[]
  bookings      Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Arrangement {
  id          String   @id @default(cuid())
  navn        String
  sted        String
  dato        DateTime
  bilde       String?
  kapasitet   Int?
  beskrivelse String
  trinn       Int[] @default([])
  arrangorID  String
  arrangor    komite   @relation(fields: [arrangorID], references: [id])
  paameldinger  ArrangementPaamelding[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id       String     @id @default(cuid())
  userID   String
  user     User       @relation(fields: [userID], references: [id])
  komiteID String?
  komite   komite?    @relation(fields: [komiteID], references: [id]) // Optional relation to Komite
  item     BookedItem
  bookedAt DateTime
  duration Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArrangementPaamelding {
  id            String      @id @default(cuid())
  userID        String
  arrangementID String
  user          User        @relation(fields: [userID], references: [id], onDelete: Cascade)
  arrangement   Arrangement @relation(fields: [arrangementID], references: [id], onDelete: Cascade)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userID, arrangementID])
}

enum BookedItem {
  KONTOR
  ONE_SOUNDBOX
  TWO_SOUNDBOXES
}

enum UserRole {
  ADMIN
  USER
}